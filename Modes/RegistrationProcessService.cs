using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using DBEssentials;

public class RegistrationProcessService {
	bool DEBUG = true;
	public RegistrationProcessService () { }
	public void StartServiceCustomer (
			Update update,
			String usernameTemp, String msgTextTemp, long chatIdTemp,
			Commands commands, DBApi RegistrationFormsDB, DBApi UsersDB

        ) {

		/*
		if (list[0] == "!UNDO") {
            BaseDBModel elementTemp = RegistrationFormsDB.findByField(FieldsDB.Username, '\'' + usernameTemp + '\'');
            FillOutFormParticipants formTemp = elementTemp as FillOutFormParticipants ?? new FillOutFormParticipants();
            formTemp.stage -= 2;
            if (RegistrationFormsDB.UpdateByField(formTemp, FieldsDB.Username, '\'' + usernameTemp + '\''))
                return;
        }
		*/
		// get the form out of the DB
		BaseDBModel element = RegistrationFormsDB.findByField(FieldsDB.Username, '\'' + usernameTemp + '\'');
		FillOutFormParticipants form = element as FillOutFormParticipants ?? new FillOutFormParticipants();


        String[]? list = ["NOTHING", "0"];

        String messageID = "0";

        if (!form.isValid()) {
            commands.sendMsg(
                chatIdTemp,
                """
                An error has occured
                """
            );
			return;
        }
        if (msgTextTemp.IndexOf('|') == -1 && form.stage != RegistrationStatuses.AwaitingConductorResponse) {
            commands.sendMsg(
                chatIdTemp,
                """
                Error: unknown command (it may be not available any more)
                Type /rescue for further help
                """
            );
            int incomingMessageID = update?.Message?.Id ?? 1;
            commands.deleteMessage(chatIdTemp, incomingMessageID);
            return;
        } else if (msgTextTemp.IndexOf('|') != -1 ) {
			list = msgTextTemp.Split('|');
			messageID = list[1];
        }
		switch (form.stage) {
			case RegistrationStatuses.AwaitingRoleChoice: {
                form.stage = RegistrationStatuses.AwaitingSexChoice;
                if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
                    return;
                var inlineKeyboard = new InlineKeyboardMarkup(
                    new List<InlineKeyboardButton[]>() {
                        new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("–ú—É–∂—Å–∫–æ–π", "MALE|" + messageID),
                            InlineKeyboardButton.WithCallbackData("–ñ–µ–Ω—Å–∫–∏–π", "FEMALE|" + messageID),
                        },
                    }
                );
                commands.updateInlineMessage(
                    chatIdTemp,
                    int.Parse(messageID),
                    "1 / ... \n–¢–≤–æ–π –ø–æ–ª:",
                    inlineKeyboard
                );
                break;
			}
			case RegistrationStatuses.AwaitingSexChoice: { // for some reason it only goes here
				if (DEBUG) Console.WriteLine($"User {usernameTemp} is {form.sex.ToString()}");
				form.sex = (list[0] == "MALE" ? Genders.Male : Genders.Female);
				form.stage = RegistrationStatuses.AwaitingAgeChoice;
                if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
					return;

                var inlineKeyboardList = new List<InlineKeyboardButton[]>() { };
				for (short i = 15; i < 26; i += 4) {
					inlineKeyboardList.Add(
						[
							InlineKeyboardButton.WithCallbackData(i.ToString(), i.ToString() + '|' + messageID),
							InlineKeyboardButton.WithCallbackData((i + 1).ToString(), (i + 1).ToString() + '|' + messageID),
							InlineKeyboardButton.WithCallbackData((i + 2).ToString(), (i + 2).ToString() + '|' + messageID),
							InlineKeyboardButton.WithCallbackData((i + 3).ToString(), (i + 3).ToString() + '|' + messageID)
						]
					);
				}
                inlineKeyboardList.Add(
                    [InlineKeyboardButton.WithCallbackData("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å", "!UNDO|" + messageID)]
                );
                var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
				commands.updateInlineMessage(
					chatIdTemp,
					int.Parse(messageID),
					"2 / ... \n–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
					inlineKeyboard
				);
				// sends commands that will be available only on the next stage
				break;
			}
			case RegistrationStatuses.AwaitingAgeChoice: {
				form.age = Int32.Parse(list[0]);
				form.stage = RegistrationStatuses.AwaitingLevelChoice;
                if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
                    return;
                if (DEBUG) Console.WriteLine($"User {usernameTemp} is {form.age} years old");
				// sends commands that will be available only on the next stage
				String[] levelsDescription =
                    [
						"–ù—É–ª–µ–≤–æ–π: –ó–Ω–∞—é –ø–∞—Ä—É —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–ºüòú",
						"A1: –ú–æ–≥—É –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüé©",
						"A2: –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—é –ø–æ –∂–∏–∑–Ω–∏",
						"B1: –ú–æ–≥—É –ª–µ–≥–∫–æ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º / —Ö–æ–±–±–∏",
						"B2: –ú–æ–≥—É –ª–µ–≥–∫–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã",
						"C1: –ú–æ–≥—É –∏–∑—ä—è—Å–Ω—è—Ç—å—Å—è –ª–µ–≥–∫–æ –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æüíÖ"
					];
				var inlineKeyboardList = new List<InlineKeyboardButton[]>() { };
				for (int i = 0; i < 6; ++i)
					inlineKeyboardList.Add(
						[InlineKeyboardButton.WithCallbackData(levelsDescription[i] , i.ToString() + '|' + messageID)]
					);

                inlineKeyboardList.Add(
                    [InlineKeyboardButton.WithCallbackData("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å", "!UNDO|" + messageID)]
                );

                var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
				commands.updateInlineMessage(
					chatIdTemp,
					int.Parse(messageID),
					"3 / ... \n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º:",
					inlineKeyboard
				);
				break;
			};
			case RegistrationStatuses.AwaitingLevelChoice: {
                form.languageProficiency = (proficiencyLevels)Int32.Parse(list[0]);
                form.stage = RegistrationStatuses.AwaitingFormatChoice;
                if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
                    return;
                Console.WriteLine($"User {usernameTemp} has {form.languageProficiency} level knowledge about English.");
                
				//tempBody = '4' + commands.mainBodyOnly(bodyList); // guarantees the next stage. Now this variable is used as a temporary string.
				var inlineKeyboard = new InlineKeyboardMarkup(
						new List<InlineKeyboardButton[]>() {
							new InlineKeyboardButton[] {
								InlineKeyboardButton.WithCallbackData("–û—Ñ—Ñ–ª–∞–π–Ω", "OFFLINE|" + messageID)
							},
							new InlineKeyboardButton[] {
								InlineKeyboardButton.WithCallbackData("–û–Ω–ª–∞–π–Ω", "ONLINE|" + messageID)
							},
							new InlineKeyboardButton[] {
								InlineKeyboardButton.WithCallbackData("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å", "!UNDO|" + messageID)
							}
						}
					);
				commands.updateInlineMessage(
					chatIdTemp,
					int.Parse(messageID),
					"4 / ... \n–ö–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å –≤—Å—Ç—Ä–µ—á–∏?",
					inlineKeyboard
				);
                break;
			}
			case RegistrationStatuses.AwaitingFormatChoice: {
				form.format = (list[0] == "OFFLINE" ? Formats.Offline : Formats.Online);
                form.stage = RegistrationStatuses.AwaitingConductorChoice;
                if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
                    return;

                //tempBody = commands.mainBodyOnly(bodyList); // Does NOT guarantee the next stage. Now this variable is used as a temporary string.
				Console.WriteLine($"User {usernameTemp} has chosen {list[0]} meetings.");
				// the first one is the visible text, the second - its code
				String[][] options = [
						["", ""],
                        ["", ""],
                        ["", ""],
						["–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", list[0] + ":OTHER|" + messageID],
					];
				String msgText = "";
				switch (list[0]) {
					case "OFFLINE": {
						msgText = "4 / ... \n–¢–≤–æ–π –≤—ã–±–æ—Ä: –æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏.\n–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?";
						options[0] = ["–í –∑–¥–∞–Ω–∏–∏ —Ü–µ—Ä–∫–≤–∏", "CHURCH"]; // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
						options[1] = ["–¢–∞–π–º-–∫–∞—Ñ–µ (–¥—Ä—É–∂–±–∞, –ª–æ—Ñ—Ç –∏ –¥—Ä—É–≥–∏–µ)", "TIME-CAFE"];
						options[2] = ["TEMPORARY UNAVAILABLE", "NONE"]; // FIX: –ó–∞–º–µ–Ω–∏—Ç—å –ª–∏–±–æ –Ω–∞ –°–ì–£, –ª–∏–±–æ –Ω–∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
						break;
					}
					case "ONLINE": {
						msgText = "4 / ... \n–¢–≤–æ–π –≤—ã–±–æ—Ä: –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏.\n–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è?";
						options[0] = ["–≤ Telegram", "TELEGRAM"];
						options[1] = ["–≤ Discord", "DISCORD"];
						options[2] = ["–≤ VK", "VK"];
						break;
					}
				}

				var inlineKeyboardList = new List<InlineKeyboardButton[]>() { };

				for (int i = 0; i < 4; ++i)
					inlineKeyboardList.Add(
						[InlineKeyboardButton.WithCallbackData(options[i][0], options[i][1] + '|' + messageID)]
					);

				var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);

				commands.updateInlineMessage(
					chatIdTemp,
					int.Parse(messageID),
					msgText,
					inlineKeyboard
				);
				
				break;
			}
			case RegistrationStatuses.AwaitingConductorResponse: {
				form.stage = RegistrationStatuses.AwaitingConductorChoice;
				form.conductor = msgTextTemp;
				if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
					return;
				commands.deleteMessage(chatIdTemp, update?.Message?.Id ?? 1);
				break;
			}
            case RegistrationStatuses.AwaitingConductorChoice: {
				if (list[0].IndexOf(':') != -1) { // the user has chosen 'other' option

					var msg = commands.sendMsg(
						chatIdTemp,
						"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)"
					);
                    commands.updateInlineMessage(
                        chatIdTemp,
                        int.Parse(messageID),
                        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                        new InlineKeyboardMarkup(new List<InlineKeyboardButton[]>() { new InlineKeyboardButton[] { InlineKeyboardButton.WithCallbackData("–î–∞!", msg.Id.ToString() + '|' + messageID) } })
                    );
                    form.stage = RegistrationStatuses.AwaitingConductorResponse;
					if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
						return;
					break;
				}
				commands.deleteMessage(chatIdTemp, Int32.Parse(list[0]));
				// TODO: make it a proper mode. The command above will also try to delete the message with ID equal to mask, which is cringe
				form.stage = RegistrationStatuses.InterestsChoice;
				if (RegistrationFormsDB.UpdateByField(form, FieldsDB.Username, '\'' + usernameTemp + '\''))
						return;

				maskManipulation masks = new maskManipulation();
				String msgText = "5 / ... \n–ß—Ç–æ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞?";
				// the first one is the visible text, the second - its code
				String[][] options = new String[][] {
					["–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ãüé≤", "BOARDGAMES"],
					["–í–∏–¥–µ–æ–∏–≥—Ä—ãüéÆ", "VIDEOGAMES"],
					["–ö–Ω–∏–≥–∏üìö", "BOOKS"],
					["–ò–ë–î–ùüìñ", "BSFNR"],
					["–ï–¥–∞ü•ó", "FOOD"],
					["–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ªüßëüèª‚Äçüéì", "STRUCTUREDMATERIALS"],
					["–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", "OTHER"], // –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞, –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ —é–∑–µ—Ä–∞ –∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–∏—Ç—å –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–µ–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä
					["–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "NEXT"]
				};
				short numberOfOptions = 7, chosenMask = (short)form.interestsMask;
				if (chosenMask != 0) {
					numberOfOptions = 8; // now we include the 'next question' button
					msgText += "\n–¢–≤–æ–π –≤—ã–±–æ—Ä: ";
				}
				short counter = 0;
				for (short i = 0; i < 7; ++i)
					if (masks.isChosen(chosenMask, i)) { // the option is chosen
						++counter;
						msgText += ((counter != 1) ? ", " : "") + options[i][0];
					}
				
				var inlineKeyboardList = new List<InlineKeyboardButton[]>() { };
				Console.WriteLine("The mask is: " + chosenMask);
				for (short i = 0; i < numberOfOptions; ++i) {
					short tempMask = chosenMask;
					String resultString = "";
					// now let's make a proper string: if the option was already chosen, it should be removed, if not, it should be added
					if (masks.isChosen(tempMask, i)) // the option is chosen: add the 'untick' text
						options[i][0] += " (—É–±—Ä–∞—Ç—å –≤—ã–±–æ—Ä)";
					tempMask = masks.flipChoise(tempMask, i);
					// merge the body into one string

					resultString = tempMask.ToString() + '|' + messageID;

					// Now we add each button to the inlineKeyboardList
					inlineKeyboardList.Add(
						new InlineKeyboardButton[] {
									InlineKeyboardButton.WithCallbackData(options[i][0], resultString)
						}
					);
				}

				var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);

				commands.updateInlineMessage(
					chatIdTemp,
					int.Parse(messageID),
					msgText,
					inlineKeyboard
				);
				break;
			}
			case RegistrationStatuses.InterestsChoice: {
				break;
			}
			case RegistrationStatuses.AwaitingInterestsChoice: { // now the user is choosing time
					// NOTE: make a module that operates just the same
					// as the code for the personal interests but has
					// time stamps, 'inconvenient' and 'the next day
					// of the week' buttons.
					/*
				String msgText = "6 / ... \n–í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ç–µ–±–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ—Å–µ—â–∞—Ç—å –∫–ª—É–±?";

				var inlineKeyboardList = new List<InlineKeyboardButton[]>() { };

				if (bodyList.Count() == 7) { // The user is on this stage not for the first time
					var chosenDaysStr = bodyList[6].Split(',');
					if (chosenDaysStr.Count() != 0) {
						//numberOfOptions = 8; // now we include the 'next question' button
						msgText += "\n–¢–≤–æ–π –≤—ã–±–æ—Ä: ";
					}
					//for (int i = 0; i < 7; ++i)

				}
					*/

				break;
			}
			default: {
					commands.sendMsg(
						chatIdTemp,
						"Error: unknown command (it may be not available any more)"
					);
					break;
				}
				;
		}
	}

}
