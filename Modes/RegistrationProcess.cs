using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using BasicCommands;
using DBController;
using Sensitive;
using firstEncounterNS;
using NewcomerNS;
using RegistrationProcessNS;

namespace RegistrationProcessNS {
	public class RegistrationProcess {
		bool DEBUG = true;
		public RegistrationProcess() {}
		public void Customer(
		            Update update,
		            String usernameTemp, String msgTextTemp, long chatIdTemp,
		            Commands commands, DBApi DB
		        ) {
					if (msgTextTemp.Split('|').Count() == 1) {
						// FIX: –≠—Ç–æ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø–∏—à–µ—Ç —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –∏–ª–∏ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.
						// –Ø –Ω–µ –∑–Ω–∞—é –ø–æ–∫–∞ –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∏–¥—ë—Ç—Å—è –æ—Ç —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–∞–∑–∞—Ç—å –∏ –∑–∞–º–µ—Å—Ç–æ
						// "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" –ø–∏—Å–∞—Ç—å "–î—Ä—É–≥–æ–µ" –∏ –Ω–∏–∫–∞–∫ —ç—Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –ø—É—Å—Ç—å —Ö–æ—Å—Ç—ã —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ —Å–∞–º–∏
						// NOTE: –º–æ–∂–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –≤—ã–±–æ—Ä–∞–º–∏ –∏ –æ—Ç—Å—ã–ª–∞—Ç—å –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞ –ø–æ—Å–ª–µ –±—Ä–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –¥—ç–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–æ—Ä–º (—Ç–æ–ª—å–∫–æ –∫–∞–∫ –º–Ω–µ –¥–æ—Å—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–¥–∞?)
						return;
					}
					var list = msgTextTemp.Split('|');
					var bodyList = list[0].Split(';');
					char stage = bodyList[0][0];
					String messageID = list[1];
		            String tempBody;
					switch (stage) {
						case '1': {
							if (DEBUG) Console.WriteLine($"User {usernameTemp} is {bodyList[1]}");
							tempBody = "2;" + bodyList[1]; // guarantees the next stage. Now this variable is used as a temporary string.
		                    var inlineKeyboardList = new List<InlineKeyboardButton[]>() {};
							for (short i = 15; i < 26; i += 4) {
								inlineKeyboardList.Add(
									new InlineKeyboardButton[] {
										InlineKeyboardButton.WithCallbackData(i.ToString(), tempBody + ';' + i.ToString() + '|' + messageID),
										InlineKeyboardButton.WithCallbackData((i + 1).ToString(), tempBody + ';' + (i + 1).ToString() + '|' + messageID),
										InlineKeyboardButton.WithCallbackData((i + 2).ToString(), tempBody + ';' + (i + 2).ToString() + '|' + messageID),
										InlineKeyboardButton.WithCallbackData((i + 3).ToString(), tempBody + ';' + (i + 3).ToString() + '|' + messageID)
									}
								);
							}
							var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
		                    commands.updateInlineMessage(
								chatIdTemp,
								int.Parse(messageID),
		                        "2 / ... \n–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
		                        inlineKeyboard
							);
		                    // sends commands that will be available only on the next stage
		                    break;
		                };
						case '2': {
							tempBody = "3;" + bodyList[1] + ';' + bodyList[2]; // guarantees the next stage. Now this variable is used as a temporary string.
							if (DEBUG) Console.WriteLine($"User {usernameTemp} is {bodyList[2]} years old");
		                    // sends commands that will be available only on the next stage
		                    String[] levelsDescription = new String[] {
								"–ù—É–ª–µ–≤–æ–π: –ó–Ω–∞—é –ø–∞—Ä—É —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–ºüòú",
								"A1: –ú–æ–≥—É –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüé©",
								"A2: –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—é –ø–æ –∂–∏–∑–Ω–∏",
								"B1: –ú–æ–≥—É –ª–µ–≥–∫–æ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º / —Ö–æ–±–±–∏",
								"B2: –ú–æ–≥—É –ª–µ–≥–∫–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã",
								"C1: –ú–æ–≥—É –∏–∑—ä—è—Å–Ω—è—Ç—å—Å—è –ª–µ–≥–∫–æ –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æüíÖ",
							};
							var inlineKeyboardList = new List<InlineKeyboardButton[]>() {};
							for (int i = 0; i < 6; ++i)
								inlineKeyboardList.Add(new InlineKeyboardButton[] {
										InlineKeyboardButton.WithCallbackData(levelsDescription[i] , tempBody + ';' + i.ToString() + '|' + messageID)
									}
								);
		                    var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
		                    commands.updateInlineMessage(
								chatIdTemp,
								int.Parse(messageID),
		                        "3 / ... \n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º:",
		                        inlineKeyboard
							);
		                    break;
		                };
						case '3': {
		                    Console.WriteLine($"User {usernameTemp} has {(proficiencyLevels)short.Parse(bodyList[3])} level knowledge about English.");
							tempBody = "4;" + bodyList[1] + ';' + bodyList[2] + ';' + bodyList[3]; // guarantees the next stage. Now this variable is used as a temporary string.
		                    var inlineKeyboard = new InlineKeyboardMarkup(
		                        new List<InlineKeyboardButton[]>() {
		                            new InlineKeyboardButton[] {
		                            InlineKeyboardButton.WithCallbackData("–û—Ñ—Ñ–ª–∞–π–Ω", tempBody + ";OFFLINE|" + messageID),
		                            },
		                            new InlineKeyboardButton[] {
		                            InlineKeyboardButton.WithCallbackData("–û–Ω–ª–∞–π–Ω", tempBody + ";ONLINE|" + messageID),
		                            },
		                        }
		                    );
		                    commands.updateInlineMessage(
								chatIdTemp,
								int.Parse(messageID),
		                        "4 / ... \n–ö–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å –≤—Å—Ç—Ä–µ—á–∏?",
		                        inlineKeyboard
							);
							break;
						}
						case '4': {
							//
							tempBody = ";" + bodyList[1] + ';' + bodyList[2] + ';' + bodyList[3] + ';' + bodyList[4] + ":"; // Does NOT guarantee the next stage. Now this variable is used as a temporary string.
		                    Console.WriteLine($"User {usernameTemp} has chosen {bodyList[4]} meetings.");
							// the first one is the visible text, the second - its code
							String[][] options = new String[][] {
								new String [] {"", ""},
								new String [] {"", ""},
								new String [] {"", ""},
								new String [] {"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–ë–∞–≥: –æ–±–Ω—É–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å)", '4' + tempBody + "OTHER|" + messageID},
							};
							String msgText = "";
							switch (bodyList[4]) {
								case "OFFLINE": {
									msgText = "4 / ... \n–¢–≤–æ–π –≤—ã–±–æ—Ä: –æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏.\n–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?";
									options[0] = new String[] {"–í –∑–¥–∞–Ω–∏–∏ —Ü–µ—Ä–∫–≤–∏", "CHURCH"}; // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
									options[1] = new String[] {"–¢–∞–π–º-–∫–∞—Ñ–µ (–¥—Ä—É–∂–±–∞, –ª–æ—Ñ—Ç –∏ –¥—Ä—É–≥–∏–µ)", "TIME-CAFE"};
									options[2] = new String[] {"TEMPORARY UNAVAILABLE", "NONE"}; // FIX: –ó–∞–º–µ–Ω–∏—Ç—å –ª–∏–±–æ –Ω–∞ –°–ì–£, –ª–∏–±–æ –Ω–∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
									break;
								}
								case "ONLINE": {
									msgText = "–¢–≤–æ–π –≤—ã–±–æ—Ä: –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏.\n–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è?";
									options[0] = new String[] {"–≤ Telegram", "TELEGRAM"};
									options[1] = new String[] {"–≤ Discord", "DISCORD"};
									options[2] = new String[] {"–≤ VK", "VK"};
									break;
							    }
								// In these two cases the bot asks the user to write their own idea (sends a message and saves its id) (less than 20 symbols)
								// FIX: these two don't work at the moment
								case "OFFLINE:OTHER": {
									var msg = commands.sendMsg(
											chatIdTemp,
											"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)"
										);
									break;
								}
								case "ONLINE:OTHER": {
									var msg = commands.sendMsg(
											chatIdTemp,
											"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)"
										);
									break;
								}
							}
		
							String BaseString = '5' + tempBody + "CODE|" + messageID;
					        
							var inlineKeyboardList = new List<InlineKeyboardButton[]>() {};
							
							for (int i = 0; i < 3; ++i)
							    inlineKeyboardList.Add(
									new InlineKeyboardButton[] {
										InlineKeyboardButton.WithCallbackData(
											options[i][0],
											BaseString.Replace("CODE", options[i][1])
										)
									}
								);
				            
				            var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
							
							commands.updateInlineMessage(
								chatIdTemp,
								int.Parse(messageID),
								msgText,
						        inlineKeyboard
							);
							break;
						}
						case '5': {
							String msgText = "5 / ... \n–ß—Ç–æ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞?";
							// the first one is the visible text, the second - its code
							String[][] options = new String[][] {
								new String [] {"–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ãüé≤", "BOARDGAMES"},
								new String [] {"–í–∏–¥–µ–æ–∏–≥—Ä—ãüéÆ", "VIDEOGAMES"},
								new String [] {"–ö–Ω–∏–≥–∏üìö", "BOOKS"},
								new String [] {"–ò–ë–î–ùüìñ", "BSFNR"},
								new String [] {"–ï–¥–∞ü•ó", "FOOD"},
								new String [] {"–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ªüßëüèª‚Äçüéì", "STRUCTUREDMATERIALS"},
								new String [] {"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–ª–æ–∂–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å)", "CUSTOM"}, // –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞, –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ —é–∑–µ—Ä–∞ –∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–∏—Ç—å –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–µ–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä
								new String [] {"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "NEXT"}
							};
							short numberOfOptions = 7, chosenMask = 0;
							if (bodyList.Count() == 6) { // The user is on this stage not for the first time
								chosenMask = short.Parse(bodyList[5]);
								if (chosenMask != 0) {
									numberOfOptions = 8; // now we include the 'next question' button
									msgText += "\n–¢–≤–æ–π –≤—ã–±–æ—Ä: ";
								}
								short counter = 0;
								for (int i = 0; i < 7; ++i)
									if (((chosenMask >> i) & 1) == 1) { // the option is chosen
										++counter;
										msgText += ((counter != 1) ? ", " : "") + options[i][0];
									}
								
							}
							// it will have many interest options
							var inlineKeyboardList = new List<InlineKeyboardButton[]>() {};
							
							for (short i = 0; i < numberOfOptions; ++i) {
								String resultString = "5;";
								if (i == 7) // everything but the 'next' button doesn't change the stage
									resultString = "6;";
								
								short tempMask = chosenMask;
								// now let's make a proper string: if it was chosen already, it should be removed, if not, it should be added
								if (((chosenMask >> i) & 1) == 1) { // the option is chosen: remove it from the mask, add the 'uncheck' text
									tempMask &= (short)~(1 << i); // we remove the option as being chosen from the mask for this particular button
									options[i][0] += " (—É–±—Ä–∞—Ç—å –≤—ã–±–æ—Ä)";
								} else // add the option
									tempMask |= (short)(1 << i); // we add the option to the mask for the particular button
								
								// merge the body into one string
								for (int j = 1; j < 5; ++j)
									resultString += bodyList[j] + ';';
								resultString += tempMask.ToString() + '|' + messageID;
								
								// Now we add each button to the inlineKeyboardList
								inlineKeyboardList.Add(
									new InlineKeyboardButton[] {
										InlineKeyboardButton.WithCallbackData(options[i][0], resultString)
									}
								);
							}
							
				            var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
							
							commands.updateInlineMessage(
								chatIdTemp,
								int.Parse(messageID),
								msgText,
						        inlineKeyboard
							);
							break;
						};
						case '6': { // now the user is choosing time
							// NOTE: make a module that operates just the same
							// as the code for the personal interests but has
							// time stamps, 'inconvenient' and 'the next day
							// of the week' buttons.
							
							String msgText = "6 / ... \n–í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ç–µ–±–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ—Å–µ—â–∞—Ç—å –∫–ª—É–±?";
							
							var inlineKeyboardList = new List<InlineKeyboardButton[]> () {};
							
							if (bodyList.Count() == 7) { // The user is on this stage not for the first time
								var chosenDaysStr = bodyList[6].Split(',');
								if (chosenDaysStr.Count() != 0) {
									//numberOfOptions = 8; // now we include the 'next question' button
									msgText += "\n–¢–≤–æ–π –≤—ã–±–æ—Ä: ";
								}
								//for (int i = 0; i < 7; ++i)
									
							}
		
							
							break;
						};
		                default: {
		                    commands.sendMsg(
		                        chatIdTemp,
		                        "Error: unknown command (it may be not available any more)"
		                    );
		                    break;
		                };
		            }
				}
	}
}
