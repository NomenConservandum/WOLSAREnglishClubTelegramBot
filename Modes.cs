//using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
//using Telegram.Bot.Polling;
//using Telegram.Bot.Exceptions;
using BasicCommands;
using DBController;
using Sensitive;

namespace BotModes {
    public class Modes {
		private Boolean DEBUG = true;
        public Modes() {
            // ...
        }
        public void FillerMode(
            Update update,
            String usernameTemp, String msgTextTemp, long chatIdTemp,
            Commands commands, DBApi DB,
            String inviteURL
        ) {
                switch (update.Type) {
                    case UpdateType.Message: { // Ask them if they want to register and if so, what role would they like to have: a minister, a participant
                        commands.sendInlineURL(
                            chatIdTemp,
                            "I\'d like to invite you to our chat!\nThe link is here:", 
                            "Your link :D",
                            "No, thank you",
                            inviteURL
                        );
                        break;
                    }
                    case UpdateType.CallbackQuery: {
                        switch (msgTextTemp) {
                            case "NEGATIVE": {
                                commands.sendMsg(
                                    chatIdTemp,
                                    "Oww, whyyy?"
                                );
                                break;
                            };
                            default: {
                                commands.sendMsg(
                                    chatIdTemp,
                                    "Error: unknown command (it may be not available any more)"
                                );
                                break;
                            }
                        }
                        break;
                    }
                }
        }
        public void FirstEncounter(
            Update update,
            String usernameTemp, String msgTextTemp, long chatIdTemp,
            Commands commands, DBApi DB
        ) {
            switch(update.Type) {
                case UpdateType.Message: { // greet the user and suggest them to go through a regestration process
					int incomingMessageID = update?.Message?.Id ?? 0;
					if (msgTextTemp != "/start") {
                        commands.sendMsg(
                            chatIdTemp,
                            "–ï—Å–ª–∏ —á—Ç–æ, –∫–æ–º–∞–Ω–¥–∞: /start"
                        );
						commands.deleteMessage(chatIdTemp, incomingMessageID);
                        break;
                    }
					Variables sensitive = new Variables();
                    // Bot sends the InLine keyboard with the choice
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new List<InlineKeyboardButton[]>() {
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("...", "NONE"),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("...", "NONE"), 
                            },
                        }
                    );
                    var msg1 = commands.sendMsgInline(
                        chatIdTemp,
                        "üèÉüèªLOADING...",
                        inlineKeyboard
                    );
                    var dataTransferAgreenment = new InlineKeyboardMarkup(
                        new List<InlineKeyboardButton[]>() {
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithUrl("–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", sensitive.getDTALink()),
                            },
                        }
                    );
                    var msg2 = commands.sendMsgInline(
                        chatIdTemp,
                        "–ù–∞–∂–∏–º–∞—è –Ω–∞ '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!', –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ)",
                        dataTransferAgreenment
                    );
					String dataString = "REGISTRATION;" + msg1.Id.ToString() + ";" + msg2.Id.ToString();
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new List<InlineKeyboardButton[]>() {
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", dataString)
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithUrl("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–ª—É–±–µ (FAQ)", sensitive.getFAQLink()), 
                            },
                        }
                    );
                    
					// update the registration button to have ID's inside to pass them further
                    commands.updateInlineMessage(chatIdTemp, msg1.Id, "–Ø —Ö–æ—á—É...", inlineKeyboard);
					
                    break;
                };
                case UpdateType.CallbackQuery: {
                    switch (msgTextTemp.Substring(0, 12)) {
                        case "REGISTRATION": {
							var list = msgTextTemp.Split(';');
                            var inlineKeyboard = new InlineKeyboardMarkup(
                                new List<InlineKeyboardButton[]>() {
                                    new InlineKeyboardButton[] {
                                    InlineKeyboardButton.WithCallbackData("–°—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!", "PARTICIPANT|" + list[1]),                  
                                    InlineKeyboardButton.WithCallbackData("–°—Ç–∞—Ç—å —Å–ª—É–∂–∏—Ç–µ–ª–µ–º!", "MINISTER|" + list[1]),
                                    },
                                }
                            );
                            // update the inline message and delete the data transfer message
                            commands.updateInlineMessage(chatIdTemp, int.Parse(list[1]), "–Ø —Ö–æ—á—É...", inlineKeyboard);
							commands.deleteMessage(chatIdTemp, int.Parse(list[2]));
                            if (DB.Add(new Users(chatIdTemp, usernameTemp, statuses.newcomer, roles.NONE, 0))) // The user is added to the DB
                                return; // what? The user is already in the DB? Then they shouldn't get here.
							if (DEBUG) Console.WriteLine($"User {usernameTemp}: new status \'Newcomer\'");
                            // switches the mode by adding the user to the DB
                            break;
                        }
                        default: {
                            commands.sendMsg(
                                chatIdTemp,
                                "Error: unknown command (it may be not available any more)"
                            );
                            break;
                        }
                    }
                    break;
                }
            }
        }

        // other modes
        
        // Pre-registration mode. Used when the user has a role 'newcomer.'
        public void newcomerMode(
            Update update,
            String usernameTemp, String msgTextTemp, long chatIdTemp,
            Commands commands, DBApi DB
        ) {
			var list = msgTextTemp.Split('|');
			String choice = list[0];
			String messageID = list[1];
            // Bot sends the InLine keyboard with the choice
			if (DEBUG) Console.WriteLine($"User {usernameTemp} has decided to register as a {choice}");
            switch (choice) {
                case "PARTICIPANT": {
                    if (DB.Update(new Users(chatIdTemp, usernameTemp, statuses.inregprocCustomer, roles.NONE, 0))) // The users status is changed
                        return;
                    // this mode won't be used anymore
                    // sends commands that will be available only in the next mode: 'inregprocCustomer'
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new List<InlineKeyboardButton[]>() {
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("–ú—É–∂—Å–∫–æ–π", "1;MALE|" + messageID),                  
                            InlineKeyboardButton.WithCallbackData("–ñ–µ–Ω—Å–∫–∏–π", "1;FEMALE|" + messageID),
                            },
                        }
                    );
                    commands.updateInlineMessage(
						chatIdTemp,
						int.Parse(messageID),
						"1 / ... .\n–¢–≤–æ–π –ø–æ–ª:",
						inlineKeyboard
					);
                    break;
                };
                case "MINISTER": {
                    if (DB.Update(new Users(chatIdTemp, usernameTemp, statuses.inregprocMinister, roles.NONE, 0))) // The users status is changed
                        return;
                    // this mode won't be used anymore
                    // sends commands that will be available only in the next mode
                    commands.sendMsg(
                        chatIdTemp,
                        "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É)"
                    );
                    break;
                };
                default: {
                    /*
					commands.sendMsg(
                        chatIdTemp,
                        "Error: unknown command (it may be not available any more)"
                    );
					*/
                    break;
                };
            }
        }
        public void inregprocCustomer(
            Update update,
            String usernameTemp, String msgTextTemp, long chatIdTemp,
            Commands commands, DBApi DB
        ) {
			if (msgTextTemp.Split('|').Count() == 1) {
				// FIX: –≠—Ç–æ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø–∏—à–µ—Ç —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –∏–ª–∏ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.
				// –Ø –Ω–µ –∑–Ω–∞—é –ø–æ–∫–∞ –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∏–¥—ë—Ç—Å—è –æ—Ç —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–∞–∑–∞—Ç—å –∏ –∑–∞–º–µ—Å—Ç–æ
				// "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" –ø–∏—Å–∞—Ç—å "–î—Ä—É–≥–æ–µ" –∏ –Ω–∏–∫–∞–∫ —ç—Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –ø—É—Å—Ç—å —Ö–æ—Å—Ç—ã —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ —Å–∞–º–∏
				// NOTE: –º–æ–∂–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –≤—ã–±–æ—Ä–∞–º–∏ –∏ –æ—Ç—Å—ã–ª–∞—Ç—å –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞ –ø–æ—Å–ª–µ –±—Ä–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –¥—ç–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–æ—Ä–º (—Ç–æ–ª—å–∫–æ –∫–∞–∫ –º–Ω–µ –¥–æ—Å—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–¥–∞?)
				return;
			}
			var list = msgTextTemp.Split('|');
			var bodyList = list[0].Split(';');
			char stage = bodyList[0][0];
			String messageID = list[1];
            String tempBody;
			// if (DEBUG) Console.WriteLine($"User {usernameTemp} is at stage {stage}");
			switch (stage) {
				case '1': {
					if (DEBUG) Console.WriteLine($"User {usernameTemp} is {bodyList[1]}");
					tempBody = "2;" + bodyList[1]; // guarantees the next stage. Now this variable is used as a temporary string.
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new List<InlineKeyboardButton[]>() {
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("15", tempBody + ";15|" + messageID),
                            InlineKeyboardButton.WithCallbackData("16", tempBody + ";16|" + messageID),
                            InlineKeyboardButton.WithCallbackData("17", tempBody + ";17|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("18", tempBody + ";18|" + messageID),
                            InlineKeyboardButton.WithCallbackData("19", tempBody + ";19|" + messageID),
                            InlineKeyboardButton.WithCallbackData("20", tempBody + ";20|" + messageID),
                            InlineKeyboardButton.WithCallbackData("21", tempBody + ";21|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("22", tempBody + ";22|" + messageID),
                            InlineKeyboardButton.WithCallbackData("23", tempBody + ";23|" + messageID),
                            InlineKeyboardButton.WithCallbackData("24", tempBody + ";24|" + messageID),
                            InlineKeyboardButton.WithCallbackData("25", tempBody + ";25|" + messageID),
                            },
                        }
                    );
                    commands.updateInlineMessage(
						chatIdTemp,
						int.Parse(messageID),
                        "2 / ... .\n–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
                        inlineKeyboard
					);
                    // sends commands that will be available only on the next stage
                    break;
                };
				case '2': {
					tempBody = "3;" + bodyList[1] + ';' + bodyList[2]; // guarantees the next stage. Now this variable is used as a temporary string.
					if (DEBUG) Console.WriteLine($"User {usernameTemp} is {bodyList[2]} years old");
                    // sends commands that will be available only on the next stage
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new List<InlineKeyboardButton[]>() {
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("–ù—É–ª–µ–≤–æ–π: –ó–Ω–∞—é –ø–∞—Ä—É —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–ºüòú", tempBody + ";0|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("A1: –ú–æ–≥—É –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüé©", tempBody + ";A1|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("A2: –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—é –ø–æ –∂–∏–∑–Ω–∏", tempBody + ";A2|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("B1: –ú–æ–≥—É –ª–µ–≥–∫–æ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º / —Ö–æ–±–±–∏", tempBody + ";B1|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("B2: –ú–æ–≥—É –ª–µ–≥–∫–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã", tempBody + ";B2|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("C1: –ú–æ–≥—É –∏–∑—ä—è—Å–Ω—è—Ç—å—Å—è –ª–µ–≥–∫–æ –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æüíÖ", tempBody + ";C1|" + messageID),
                            },
                        }
                    );
                    commands.updateInlineMessage(
						chatIdTemp,
						int.Parse(messageID),
                        "3 / ... .\n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º:",
                        inlineKeyboard
					);
                    break;
                };
				case '3': {
                    Console.WriteLine($"User {usernameTemp} has {bodyList[3]} level knowledge about English.");
					tempBody = "4;" + bodyList[1] + ';' + bodyList[2] + ';' + bodyList[3]; // guarantees the next stage. Now this variable is used as a temporary string.
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new List<InlineKeyboardButton[]>() {
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("–û—Ñ—Ñ–ª–∞–π–Ω", tempBody + ";OFFLINE|" + messageID),
                            },
                            new InlineKeyboardButton[] {
                            InlineKeyboardButton.WithCallbackData("–û–Ω–ª–∞–π–Ω", tempBody + ";ONLINE|" + messageID),
                            },
                        }
                    );
                    commands.updateInlineMessage(
						chatIdTemp,
						int.Parse(messageID),
                        "4 / ... .\n–ö–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å –≤—Å—Ç—Ä–µ—á–∏?",
                        inlineKeyboard
					);
					break;
				}
				case '4': {
					//
					tempBody = ";" + bodyList[1] + ';' + bodyList[2] + ';' + bodyList[3] + ';' + bodyList[4] + ":"; // Does NOT guarantee the next stage. Now this variable is used as a temporary string.
                    Console.WriteLine($"User {usernameTemp} has chosen {bodyList[4]} meetings.");
					String[] optionText = {"", "", ""}, optionCode = {"", "", ""}; // I'm very sorry for this dumb and straightforward code, I don't know how to do better
					String msgText = "";
					switch (bodyList[4]) {
						case "OFFLINE": {
							msgText = "–¢–≤–æ–π –≤—ã–±–æ—Ä: –æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏.\n–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?";
							optionText[0] = "–í –∑–¥–∞–Ω–∏–∏ —Ü–µ—Ä–∫–≤–∏"; // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
							optionCode[0] = "CHURCH";
							//optionText[2] = "–≤ –∑–¥–∞–Ω–∏–∏ –°–ì–£ (12–π –∫–æ—Ä–ø—É—Å)"; // NOTE: –Ø –Ω–µ –∑–Ω–∞—é, –±—É–¥—É –ª–∏ —ç—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å
							//optionCode[2] = "SSU12D";
							optionText[1] = "–¢–∞–π–º-–∫–∞—Ñ–µ (–¥—Ä—É–∂–±–∞, –ª–æ—Ñ—Ç –∏ –¥—Ä—É–≥–∏–µ)";
							optionCode[1] = "TIME-CAFE";
							optionText[2] = "TEMPORARY UNAVAILABLE"; // FIX: –ó–∞–º–µ–Ω–∏—Ç—å –ª–∏–±–æ –Ω–∞ –°–ì–£, –ª–∏–±–æ –Ω–∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
							optionCode[2] = "NONE";
							break;
						}
						case "ONLINE": {
							msgText = "–¢–≤–æ–π –≤—ã–±–æ—Ä: –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏.\n–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è?";
							optionText[0] = "–≤ Telegram";
							optionCode[0] = "TELEGRAM";
							optionText[1] = "–≤ Discord"; 
							optionCode[1] = "DISCORD";
							optionText[2] = "–≤ VK";
							optionCode[2] = "VK";
							break;
					    }
						// In these two cases the bot asks the user to write their own idea (sends a message and saves its id) (less than 20 symbols)
						case "OFFLINE:OTHER": {
							var msg = commands.sendMsg(
									chatIdTemp,
									"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)"
								);
							break;
						}
						case "ONLINE:OTHER": {
							var msg = commands.sendMsg(
									chatIdTemp,
									"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)"
								);
							break;
						}
					}

					String BaseString = '5' + tempBody + "CODE|" + messageID;
			        
					var inlineKeyboardList =
						new List<InlineKeyboardButton[]>() {
		                    new InlineKeyboardButton[] {
								InlineKeyboardButton.WithCallbackData("...", "NONE"),
				            },
		                    new InlineKeyboardButton[] {
								InlineKeyboardButton.WithCallbackData("...", "NONE"),
				            },
		                    new InlineKeyboardButton[] {
								InlineKeyboardButton.WithCallbackData("...", "NONE"),
				            },
					        new InlineKeyboardButton[] {
							InlineKeyboardButton.WithCallbackData("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–ë–∞–≥: –æ–±–Ω—É–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å)", '4' + tempBody + "OTHER|" + messageID),
							},
					        //new InlineKeyboardButton[] {
							//InlineKeyboardButton.WithCallbackData("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", tempBody + "|" + messageID),
							//},
						};
					
					for (int i = 0; i < 3; ++i)
					    inlineKeyboardList[i][0] =
							InlineKeyboardButton.WithCallbackData(
								optionText[i],
								BaseString.Replace("CODE", optionCode[i])
							);
		            
		            var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
					
					commands.updateInlineMessage(
						chatIdTemp,
						int.Parse(messageID),
						msgText,
				        inlineKeyboard
					);
					break;
				}
				case '5': {
					String msgText = "5 / ...: –ß—Ç–æ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞?";
					String[][] options = new String[][] {
						new String [] {"–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "BOARDGAMES"},
						new String [] {"–í–∏–¥–µ–æ–∏–≥—Ä—ã", "VIDEOGAMES"},
						new String [] {"–ö–Ω–∏–≥–∏", "BOOKS"},
						new String [] {"–ò–ë–î–ù", "BSFNR"},
						new String [] {"–ï–¥–∞", "FOOD"},
						new String [] {"–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "STRUCTUREDMATERIALS"},
						new String [] {"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–ª–æ–∂–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å)", "CUSTOM"}, // –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞, –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ —é–∑–µ—Ä–∞ –∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–∏—Ç—å –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–µ–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä
						new String [] {"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "NEXT"}
					};
					// I'm very sorry for this dumb and straightforward code, I don't know how to do better
					short numberOfOptions = 7, chosenMask = 0;
					if (bodyList.Count() == 6) { // The user is on this stage not for the first time
						chosenMask = short.Parse(bodyList[5]);
						if (chosenMask != 0) numberOfOptions = 8; // now we include the 'next question' button
						if (bodyList.Count() == 7) {// The user is on this stage not for the first time
							msgText += "\n–¢–≤–æ–π –≤—ã–±–æ—Ä: ";
							for (int i = 0; i < 7; ++i)
								if (((chosenMask >> i) & 1) == 1) // the option is chosen
									msgText += ", " + options[i][0];
						}
					}
					// it will have many interest options
					var inlineKeyboardList = new List<InlineKeyboardButton[]>() {};
					
					for (short i = 0; i < numberOfOptions; ++i) {
						String resultString = "";
						if (((chosenMask >> i) & 1) == 0 && i != 7) // check if the user hasn't chosen this particular option
							resultString += "5;";
						if (i == 7) { // let's check for the 'next' button first
							resultString += "6;";
						}
						short tempMask = chosenMask;
						// now let's make a proper string: if it was chosen already, it should be removed, if not, it should be added
						if (((chosenMask >> i) & 1) == 1) { // the option is chosen and add the '–£–±—Ä–∞—Ç—å –≤—ã–±–æ—Ä' text
							tempMask &= (short)~(1 << i); // we remove the option as being chosen from the mask for the particular button
							options[i][0] += " (—É–±—Ä–∞—Ç—å –≤—ã–±–æ—Ä)";
							resultString += "5;"; // HACK: I guess this system is absolete: I can just split the string and look how many parts are there.
						} else { // add the option
							tempMask |= (short)(1 << i); // we add the option to the mask for the particular button
						}
						// merge the body into one string
						for (int j = 1; j < 5; ++j)
							resultString += bodyList[j] + ';';
						resultString += tempMask.ToString() + '|' + messageID;
						
						inlineKeyboardList.Add(
							new InlineKeyboardButton[] {
								InlineKeyboardButton.WithCallbackData(options[i][0], resultString)
							}
						);
					}
					
		            var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardList);
					
					commands.updateInlineMessage(
						chatIdTemp,
						int.Parse(messageID),
						msgText,
				        inlineKeyboard
					);
					break;
				}
                default: {
                    commands.sendMsg(
                        chatIdTemp,
                        "Error: unknown command (it may be not available any more)"
                    );
                    break;
                };
            }
		}
		//
    }
}
